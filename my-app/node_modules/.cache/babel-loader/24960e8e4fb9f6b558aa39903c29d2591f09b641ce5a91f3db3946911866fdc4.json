{"ast":null,"code":"var _jsxFileName = \"/Users/krystiancichorz/Dokumenty/PROGRAMOWANIE/WEB/mern-todo-together/my-app/src/pages/ToDo.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCredentials, updateToken } from \"../state/user\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ToDo = () => {\n  _s();\n  const dispatch = useDispatch();\n  const token = useSelector(state => state.user.token);\n  const header = {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${token}`\n  };\n  const refreshAndDispatchToken = async () => {\n    await fetch(\"http://localhost:5000/refresh\", {\n      method: \"GET\",\n      headers: header,\n      credentials: \"include\"\n    }).then(async res => {\n      if (res.ok) {\n        const data = await res.json();\n        dispatch(updateToken({\n          token: data.token\n        }));\n      } else {\n        dispatch(setCredentials({\n          token: \"\",\n          email: \"\",\n          username: \"\"\n        }));\n      }\n    });\n  };\n  const isUser = async () => {\n    const response = await fetch(\"http://localhost:5000/verify\", {\n      method: \"POST\",\n      headers: header\n    });\n    if (response.status === 403) {\n      await refreshAndDispatchToken();\n    } else if (!response.ok) {\n      dispatch(setCredentials({\n        token: \"\",\n        email: \"\",\n        username: \"\"\n      }));\n    }\n  };\n  useEffect(() => {\n    isUser();\n    const intervalId = setInterval(isUser, 1000 * 60 * 15);\n    return () => clearInterval(intervalId);\n  }, [token]);\n  return token ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [token, \" You're here.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 18\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"You're not here.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 52\n  }, this);\n};\n_s(ToDo, \"7YBb5M6ruQU4d08F1luSdbowvSQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = ToDo;\nexport default ToDo;\nvar _c;\n$RefreshReg$(_c, \"ToDo\");","map":{"version":3,"names":["useEffect","useDispatch","useSelector","setCredentials","updateToken","jsxDEV","_jsxDEV","ToDo","_s","dispatch","token","state","user","header","Authorization","refreshAndDispatchToken","fetch","method","headers","credentials","then","res","ok","data","json","email","username","isUser","response","status","intervalId","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/krystiancichorz/Dokumenty/PROGRAMOWANIE/WEB/mern-todo-together/my-app/src/pages/ToDo.tsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCredentials, updateToken } from \"../state/user\";\n\nconst ToDo = () => {\n  const dispatch = useDispatch();\n  const token = useSelector((state: any) => state.user.token);\n  const header = {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${token}`,\n  };\n  const refreshAndDispatchToken = async () => {\n    await fetch(\"http://localhost:5000/refresh\", {\n      method: \"GET\",\n      headers: header,\n      credentials: \"include\",\n    }).then(async (res) => {\n      if (res.ok) {\n        const data = await res.json();\n        dispatch(updateToken({ token: data.token }));\n      } else {\n        dispatch(setCredentials({ token: \"\", email: \"\", username: \"\" }));\n      }\n    });\n  };\n\n  const isUser = async () => {\n    const response = await fetch(\"http://localhost:5000/verify\", {\n      method: \"POST\",\n      headers: header,\n    });\n    if (response.status === 403) {\n      await refreshAndDispatchToken();\n    } else if (!response.ok) {\n      dispatch(setCredentials({ token: \"\", email: \"\", username: \"\" }));\n    }\n  };\n\n  useEffect(() => {\n    isUser();\n    const intervalId = setInterval(isUser, 1000 * 60 * 15);\n    return () => clearInterval(intervalId);\n  }, [token]);\n\n  return token ? <div>{token} You're here.</div> : <div>You're not here.</div>;\n};\n\nexport default ToDo;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,cAAc,EAAEC,WAAW,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAMS,KAAK,GAAGR,WAAW,CAAES,KAAU,IAAKA,KAAK,CAACC,IAAI,CAACF,KAAK,CAAC;EAC3D,MAAMG,MAAM,GAAG;IACb,cAAc,EAAE,kBAAkB;IAClCC,aAAa,EAAG,UAASJ,KAAM;EACjC,CAAC;EACD,MAAMK,uBAAuB,GAAG,MAAAA,CAAA,KAAY;IAC1C,MAAMC,KAAK,CAAC,+BAA+B,EAAE;MAC3CC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEL,MAAM;MACfM,WAAW,EAAE;IACf,CAAC,CAAC,CAACC,IAAI,CAAC,MAAOC,GAAG,IAAK;MACrB,IAAIA,GAAG,CAACC,EAAE,EAAE;QACV,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;QAC7Bf,QAAQ,CAACL,WAAW,CAAC;UAAEM,KAAK,EAAEa,IAAI,CAACb;QAAM,CAAC,CAAC,CAAC;MAC9C,CAAC,MAAM;QACLD,QAAQ,CAACN,cAAc,CAAC;UAAEO,KAAK,EAAE,EAAE;UAAEe,KAAK,EAAE,EAAE;UAAEC,QAAQ,EAAE;QAAG,CAAC,CAAC,CAAC;MAClE;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAAC,8BAA8B,EAAE;MAC3DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEL;IACX,CAAC,CAAC;IACF,IAAIe,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAC3B,MAAMd,uBAAuB,CAAC,CAAC;IACjC,CAAC,MAAM,IAAI,CAACa,QAAQ,CAACN,EAAE,EAAE;MACvBb,QAAQ,CAACN,cAAc,CAAC;QAAEO,KAAK,EAAE,EAAE;QAAEe,KAAK,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAG,CAAC,CAAC,CAAC;IAClE;EACF,CAAC;EAED1B,SAAS,CAAC,MAAM;IACd2B,MAAM,CAAC,CAAC;IACR,MAAMG,UAAU,GAAGC,WAAW,CAACJ,MAAM,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;IACtD,OAAO,MAAMK,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,CAACpB,KAAK,CAAC,CAAC;EAEX,OAAOA,KAAK,gBAAGJ,OAAA;IAAA2B,QAAA,GAAMvB,KAAK,EAAC,eAAa;EAAA;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC,gBAAG/B,OAAA;IAAA2B,QAAA,EAAK;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAC9E,CAAC;AAAC7B,EAAA,CAzCID,IAAI;EAAA,QACSN,WAAW,EACdC,WAAW;AAAA;AAAAoC,EAAA,GAFrB/B,IAAI;AA2CV,eAAeA,IAAI;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}